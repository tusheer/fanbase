//test
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQLURL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String?  @db.Text
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Celebrity {
  id            String       @id @default(cuid())
  email         String       @unique
  username      String       @unique
  firstName     String?
  lastName      String?
  phone         Int?
  password      String       @db.Text
  createdAt     DateTime     @default(now())
  updateAt      DateTime     @updatedAt
  country       String?
  shop          Shop[]
  Product       Product[]
  profileImage  String?
  coverImage    String?
  socialMedia   SocialMedia? @relation(fields: [socialMediaId], references: [id])
  topFan        PublicUser[]
  socialMediaId String?
  session       Session[]
}

model PublicUser {
  id            String       @id @default(cuid())
  email         String       @unique
  username      String?      @unique
  firstName     String?
  lastName      String?
  phone         Int?
  password      String       @db.Text
  createdAt     DateTime     @default(now())
  updateAt      DateTime     @updatedAt
  country       String?
  socialMedia   SocialMedia? @relation(fields: [socialMediaId], references: [id])
  socialMediaId String?
  fan           Celebrity[]
  session       Session[]
}

model Product {
  id          String         @id @default(cuid())
  images      ProductImage[]
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Celebrity   Celebrity?     @relation(fields: [celebrityId], references: [id])
  celebrityId String?
  Shop        Shop?          @relation(fields: [shopId], references: [id])
  shopId      String?
  type        String
}

model Shop {
  id          String     @id @default(cuid())
  name        String
  products    Product[]
  Celebrity   Celebrity? @relation(fields: [celebrityId], references: [id])
  celebrityId String?
  type        String
}

model ProductImage {
  id          String   @id @default(cuid())
  url         String
  name        String
  description String?
  alt         String?
  colors      String[]
  types       String[]
  sizes       String[]
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?
}

model SocialMedia {
  id         String       @id
  facebook   String?      @unique
  youtube    String?      @unique
  tiktok     String?      @unique
  instragram String?      @unique
  Celebrity  Celebrity[]
  PublicUser PublicUser[]
}

model Session {
  id           String      @id @default(cuid())
  userAgent    Json
  refreshToken String      @unique
  Celebrity    Celebrity?  @relation(fields: [celebrityId], references: [id])
  celebrityId  String?
  PublicUser   PublicUser? @relation(fields: [publicUserId], references: [id])
  publicUserId String?
}
